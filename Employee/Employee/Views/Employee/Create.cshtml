@model Employee.ViewModel.EmployeeViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm("Create", "Employee", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Employee</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.BirthDate, new { type = "date", @class = "form-control", @max = "" })
                @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileAttach, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.FileAttach, new { type = "file", placeholder = Html.DisplayNameFor(m => m.FileAttach), @class = "form-control", @onchange ="ValidateFileInput(this);" })
                @Html.ValidationMessageFor(m => m.FileAttach, "", new { @class = "text-danger" })
                <span id="fileErrorMsg" class="text-danger"></span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.JobTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.JobTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.JobTitle, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index",null,new { @class = "btn btn-primary" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd
            }
            if (mm < 10) {
                mm = '0' + mm
            }
            today = yyyy + '-' + mm + '-' + dd;
            document.getElementById("BirthDate").setAttribute("max", today);
        });
        var _validFileExtensions = [".jpg", ".jpeg", ".bmp", ".gif", ".png"];
        function ValidateFileInput(input) {
            $("#fileErrorMsg").empty();
                if (input.type == "file") {
                var fileName = input.value;
                var fileSize = input.files[0].size / 1024 / 1024;
                if (fileName.length > 0) {
                var extensionValid = false;
                var sizeValid = false;
                for (var j = 0; j < _validFileExtensions.length; j++) {
                   var currentExtension = _validFileExtensions[j];
                   if (fileName.substr(fileName.length - currentExtension.length, currentExtension.length).toLowerCase() == currentExtension.toLowerCase()) {
                       extensionValid = true;
                       break;
                   }
               }
             
               if (fileSize < 25) {
                     sizeValid = true;                  
                   }
                 
               if (!extensionValid) {
                       $("#fileErrorMsg").empty();
                       $("#fileErrorMsg").append("Sorry, " + fileName + " is invalid, allowed extensions are: " + _validFileExtensions.join(", "));
                       input.value = "";
                       return false;
                   }

               if (!sizeValid) {                
                       $("#fileErrorMsg").empty();
                       $("#fileErrorMsg").append("Maximum allowed file size is 25 MB")
                       input.value = "";
                       return false;
                   }
               }
           }
           return true;
         }
    </script>
}



